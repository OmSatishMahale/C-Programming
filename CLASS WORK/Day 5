----------------------------Program 44----------------------------
#include<stdio.h>

void CountFactorsNonFactors(int iNo)
{
    int iCnt =0,iFrequency1=0,iFrequency2=0;
    if(iNo < 0)
    {
        iNo = -iNo;
    }
    for(iCnt =1; iCnt < iNo ;iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            iFrequency1++;
        }
        else
        {
            iFrequency2++;
        }
    }
        printf("Number of Factors are : %d\n",iFrequency1);
        printf("Number of Non Factors are : %d\n",iFrequency2);
}

int main()
{

    int iValue = 0;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    CountFactorsNonFactors(iValue);

    return 0;
}


----------------------------Program 45----------------------------
//Prime Number

#include<stdio.h>
#include<stdbool.h>

int CheckPrime(int iNo)
{
    int iCnt =0,iFrequency=0;
    if(iNo < 0)
    {
        iNo = -iNo;
    }
    for(iCnt =2 ; iCnt < (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            iFrequency++;
        }
    }
        if(iFrequency == 0)
        {
            return true;        //No Factors
        }
        else
        {
            return false;       //Atleast One Factor
        }
}

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}



----------------------------Program 46----------------------------
//Prime Number

#include<stdio.h>
#include<stdbool.h>

int CheckPrime(int iNo)
{
    int iCnt =0,iFrequency=0;
    if(iNo < 0)
    {
        iNo = -iNo;
    }
    for(iCnt = 2 ; iCnt < (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            iFrequency++;
            break;              //Optimization
        }
    }
        if(iFrequency == 0)
        {
            return true;        //No Factors
        }
        else
        {
            return false;       //Atleast One Factor
        }
}
// Time Complexity : O(1) to O(N/2)   

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}

/*
Time Complexity : For NonPrime : 1 or 2
Time Complexity : For Prime : O(N/2)
*/



----------------------------Program 47----------------------------
#include<stdio.h>
#include<stdbool.h>

bool CheckPrime(int iNo)
{
    int iCnt =0;
    if(iNo < 0)
    {
        iNo = -iNo;
    }
    for(iCnt = 2 ; iCnt <= (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            break;              //Optimization
        }
    }
        if(iCnt > (iNo/2))
        {
            return true;        //No Factors
        }
        else
        {
            return false;       //Atleast One Factor
        }
}
// Time Complexity : O(1) to O(N/2)   

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}

/*
Time Complexity : For NonPrime : 1 or 2
Time Complexity : For Prime : O(N/2)
*/



----------------------------Program 48----------------------------
#include<stdio.h>
#include<stdbool.h>

bool CheckPrime(int iNo)
{
    int iCnt =0;
    bool bFlag = true;

    if(iNo < 0)
    {
        iNo = -iNo;
    }
    for(iCnt = 2 ; iCnt <= (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            bFlag = false;
            break;              //Optimization
        }
    }
    return bFlag;
}
// Time Complexity : O(1) to O(N/2)   

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}

/*
Time Complexity : For NonPrime : 1 or 2
Time Complexity : For Prime : O(N/2)
*/



----------------------------Program 49----------------------------
#include<stdio.h>
#include<stdbool.h>

bool CheckPrime(int iNo)
{
    int iCnt =0;
    bool bFlag = false;

    if(iNo < 0)
    {
        iNo = -iNo;
    }

    bFlag = true;
    for(iCnt = 2 ; iCnt <= (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            bFlag = false;
            break;              //Optimization
        }
    }
    return bFlag;
}
// Time Complexity : O(1) to O(N/2)   

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}

/*
Time Complexity : For NonPrime : 1 or 2
Time Complexity : For Prime : O(N/2)
*/



----------------------------Program 50----------------------------
#include<stdio.h>
#include<stdbool.h>

bool CheckPrime(int iNo)
{
    int iCnt =0;
    bool bFlag = false;

    if(iNo < 0)
    {
        iNo = -iNo;
    }

    for(iCnt = 2,bFlag = true ; iCnt <= (iNo/2) ; iCnt++)
    {
        if(iNo % iCnt == 0)
        {
            bFlag = false;
            break;              //Optimization
        }
    }
    return bFlag;
}
// Time Complexity : O(1) to O(N/2)   

int main()
{

    int iValue = 0;
    bool bRet=false;

    printf("Enter the number : \n");
    scanf("%d",&iValue);

    bRet = CheckPrime(iValue);

    if(bRet == true)
    {
        printf("%d : Is Prime Number\n",iValue);
    }
    else
    {
        printf("%d : Is Not Prime Number\n",iValue);
    }

    return 0;
}

/*
Time Complexity : For NonPrime : 1 or 2
Time Complexity : For Prime : O(N/2)
*/


----------------------------Program 51----------------------------
#include<stdio.h>

int main()
{
    int iNo = 7236;
    int iDigit = 0;

    iDigit = iNo % 10;
    iNo = iNo/10;
    printf("%d\n",iDigit);

    iDigit = iNo % 10;
    iNo = iNo /10;
    printf("%d\n",iDigit);

    iDigit = iNo % 10;
    iNo = iNo /10;
    printf("%d\n",iDigit);

    iDigit = iNo % 10;
    iNo = iNo /10;
    printf("%d\n",iDigit);

    return 0;
}

